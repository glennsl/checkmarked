// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Fs            = require("fs");
var List          = require("bs-platform/lib/js/list.js");
var Glob          = require("glob");
var Path          = require("path");
var $$Array       = require("bs-platform/lib/js/array.js");
var Curry         = require("bs-platform/lib/js/curry.js");
var Config        = require("./config.js");
var Extract       = require("./extract.js");
var Pervasives    = require("bs-platform/lib/js/pervasives.js");
var Child_process = require("child_process");

var out_dir = "__mdcc__";

var config = Config.read(/* () */0);

function ensureDirExists(path) {
  var dir = Path.dirname(path);
  if (Fs.existsSync(dir)) {
    return 0;
  } else {
    ensureDirExists(dir);
    Fs.mkdirSync(dir);
    return /* () */0;
  }
}

function writeFile(filename, content) {
  ensureDirExists(filename);
  Fs.writeFileSync(filename, content);
  return /* () */0;
}

function checkCode(filename, lang) {
  var match = config[/* rules */2][lang];
  if (match !== undefined) {
    return List.iter(function (task_spec) {
                var match = config[/* tasks */0][task_spec[/* name */0]];
                if (match !== undefined) {
                  var cmd = match[/* command */0].replace((/\$\(file\)/), filename);
                  var match$1 = task_spec[/* arguments */1];
                  var cmd$1 = match$1 ? cmd.replace((/\$\(args\)/), match$1[0]) : cmd;
                  console.log(cmd$1);
                  Child_process.execSync(cmd$1, {
                        cwd: "__mdcc__"
                      });
                  console.log("done");
                  return /* () */0;
                } else {
                  console.log("Task not found: " + task_spec[/* name */0]);
                  return /* () */0;
                }
              }, match[/* tasks */0]);
  } else {
    console.log("Unrecognized language: " + lang);
    return /* () */0;
  }
}

function checkFile(path) {
  console.log("Parsing " + (String(path) + "... "));
  List.iteri(function (i, param) {
        var lang = param[0];
        var i$1 = Pervasives.string_of_int(i);
        var target_file = "" + (String(path) + ("." + (String(i$1) + ("." + (String(lang) + "")))));
        var target_path = Path.join(out_dir, target_file);
        writeFile(target_path, param[1]);
        Pervasives.print_string("Checking " + (target_file + "... "));
        return checkCode(target_file, lang);
      }, $$Array.to_list(Curry._1(Extract.extract, Fs.readFileSync(path, "utf8"))));
  console.log("");
  return /* () */0;
}

List.map(checkFile, List.flatten(List.map(function (pattern) {
              return $$Array.to_list(Glob.sync(pattern));
            }, config[/* sources */1])));

exports.out_dir         = out_dir;
exports.config          = config;
exports.ensureDirExists = ensureDirExists;
exports.writeFile       = writeFile;
exports.checkCode       = checkCode;
exports.checkFile       = checkFile;
/* config Not a pure module */
