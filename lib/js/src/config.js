// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var Fs          = require("fs");
var Curry       = require("bs-platform/lib/js/curry.js");
var Json_decode = require("bs-json/lib/js/src/json_decode.js");

function either(a, b, json) {
  try {
    return Curry._1(a, json);
  }
  catch (exn){
    return Curry._1(b, json);
  }
}

var filename = "mdcc.config.json";

function task(json) {
  return /* record */[/* command */Json_decode.field("command", Json_decode.string, json)];
}

function task_spec(json) {
  return /* record */[
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* arguments */Json_decode.optional(function (param) {
                return Json_decode.field("arguments", Json_decode.string, param);
              }, json)
        ];
}

function string_as_task_spec(json) {
  return /* record */[
          /* name */Json_decode.string(json),
          /* arguments : None */0
        ];
}

function rule(json) {
  return /* record */[/* tasks */Json_decode.field("tasks", function (param) {
                return Json_decode.array(function (param) {
                            return either(task_spec, string_as_task_spec, param);
                          }, param);
              }, json)];
}

function config(json) {
  return /* record */[
          /* tasks */Json_decode.field("tasks", function (param) {
                return Json_decode.dict(task, param);
              }, json),
          /* sources */Json_decode.field("sources", function (param) {
                return Json_decode.array(Json_decode.string, param);
              }, json),
          /* rules */Json_decode.field("rules", function (param) {
                return Json_decode.dict(rule, param);
              }, json)
        ];
}

var Decode = /* module */[
  /* task */task,
  /* task_spec */task_spec,
  /* string_as_task_spec */string_as_task_spec,
  /* rule */rule,
  /* config */config
];

function read() {
  return config(JSON.parse(Fs.readFileSync(filename, "utf8")));
}

exports.either   = either;
exports.filename = filename;
exports.Decode   = Decode;
exports.read     = read;
/* fs Not a pure module */
